// Generated by IcedCoffeeScript 1.6.3-j
(function() {
  var E, GPG, cmd, iced, parse, spawn, stream, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  spawn = require('child_process').spawn;

  stream = require('./stream');

  E = require('./err').E;

  parse = require('pgp-utils').userid.parse;

  cmd = require('./cmd');

  exports.GPG = GPG = (function() {
    function GPG() {}

    GPG.prototype.mutate_args = function(args) {
      return args;
    };

    GPG.prototype.run = function(inargs, cb) {
      var err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      inargs.args = this.mutate_args(inargs.args);
      inargs.name = "gpg";
      inargs.eklass = E.GpgError;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/gpg-wrapper/src/gpg.iced",
            funcname: "GPG.run"
          });
          cmd.run(inargs, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 25
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, out);
        };
      })(this));
    };

    GPG.prototype.assert_no_collision = function(short_id, cb) {
      var args, err, n, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      args = ["-k", short_id];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/gpg-wrapper/src/gpg.iced",
            funcname: "GPG.assert_no_collision"
          });
          _this.run({
            args: args,
            quiet: true
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 32
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if ((typeof err === "undefined" || err === null) && (n = (stream.grep({
            pattern: "/" + short_id,
            buffer: out
          })).length) > 1) {
            err = new E.PgpIdCollisionError("Found two keys for ID=" + short_id);
          }
          return cb(err, n);
        };
      })(this));
    };

    GPG.prototype.assert_exactly_one = function(short_id, cb) {
      var err, n, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/gpg-wrapper/src/gpg.iced",
            funcname: "GPG.assert_exactly_one"
          });
          _this.assert_no_collision(short_id, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return n = arguments[1];
              };
            })(),
            lineno: 40
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (n !== 1) {
            err = new E.NotFoundError("Didn't find a key for " + short_id);
          }
          return cb(err);
        };
      })(this));
    };

    GPG.prototype.read_uids_from_key = function(_arg, cb) {
      var args, err, fingerprint, line, lines, m, out, pattern, u, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      fingerprint = _arg.fingerprint;
      args = ["-k", fingerprint];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/gpg-wrapper/src/gpg.iced",
            funcname: "GPG.read_uids_from_key"
          });
          _this.run({
            args: args,
            quiet: true
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 48
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {
            pattern = /^uid\s+(.*)$/;
            lines = stream.grep({
              buffer: out,
              pattern: pattern
            });
            out = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = lines.length; _i < _len; _i++) {
                line = lines[_i];
                if (((m = line.match(pattern)) != null) && ((u = parse(m[1])) != null)) {
                  _results.push(u);
                }
              }
              return _results;
            })();
          }
          return cb(err, out);
        };
      })(this));
    };

    return GPG;

  })();

}).call(this);
