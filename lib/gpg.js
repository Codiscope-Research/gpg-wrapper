// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var E, GPG, cmd, exec, iced, parse, stream, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  exec = require('child_process').exec;

  stream = require('./stream');

  E = require('./err').E;

  parse = require('pgp-utils').userid.parse;

  cmd = require('./cmd');

  exports.GPG = GPG = (function() {
    GPG.prototype.CMD = "gpg";

    function GPG(opts) {
      var c;
      if ((c = opts != null ? opts.cmd : void 0) != null) {
        this.CMD = c;
      }
    }

    GPG.prototype.mutate_args = function(args) {};

    GPG.prototype.test = function(cb) {
      var err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/gpg-wrapper/src/gpg.iced",
            funcname: "GPG.test"
          });
          exec("" + _this.CMD + " --version", __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 25
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, out);
        };
      })(this));
    };

    GPG.prototype.run = function(inargs, cb) {
      var env, err, out, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this.mutate_args(inargs);
      env = process.env;
      delete env.LANGUAGE;
      inargs.name = this.CMD;
      inargs.eklass = E.GpgError;
      inargs.opts = {
        env: env
      };
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/gpg-wrapper/src/gpg.iced",
            funcname: "GPG.run"
          });
          cmd.run(inargs, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 37
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return cb(err, out);
        };
      })(this));
    };

    GPG.prototype.command_line = function(inargs) {
      var v;
      this.mutate_args(inargs);
      v = [this.CMD].concat(inargs.args);
      return v.join(" ");
    };

    GPG.prototype.assert_no_collision = function(id, cb) {
      var args, err, n, out, rows, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      args = ["-k", "--with-colons", id];
      n = 0;
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/gpg-wrapper/src/gpg.iced",
            funcname: "GPG.assert_no_collision"
          });
          _this.run({
            args: args,
            quiet: true
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 52
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err !== "undefined" && err !== null) {

          } else {
            rows = stream.colgrep({
              patterns: {
                0: /^[sp]ub$/,
                4: new RegExp("^.*" + id + "$", "i")
              },
              buffer: out,
              separator: /:/
            });
            if ((n = rows.length) > 1) {
              err = new E.PgpIdCollisionError("Found two keys for ID=" + short_id);
            }
          }
          return cb(err, n);
        };
      })(this));
    };

    GPG.prototype.assert_exactly_one = function(short_id, cb) {
      var err, n, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/gpg-wrapper/src/gpg.iced",
            funcname: "GPG.assert_exactly_one"
          });
          _this.assert_no_collision(short_id, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return n = arguments[1];
              };
            })(),
            lineno: 70
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (n !== 1) {
            err = new E.NotFoundError("Didn't find a key for " + short_id);
          }
          return cb(err);
        };
      })(this));
    };

    GPG.prototype.read_uids_from_key = function(_arg, cb) {
      var args, col, err, fingerprint, out, query, row, rows, uids, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      fingerprint = _arg.fingerprint, query = _arg.query;
      args = ["-k", "--with-colons"];
      if (fingerprint != null) {
        args.push(fingerprint);
      } else if (query != null) {
        args.push(query);
      }
      uids = [];
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/gpg-wrapper/src/gpg.iced",
            funcname: "GPG.read_uids_from_key"
          });
          _this.run({
            args: args,
            quiet: true
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return out = arguments[1];
              };
            })(),
            lineno: 81
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (typeof err === "undefined" || err === null) {
            rows = stream.colgrep({
              patterns: {
                0: /^uid|pub$/
              },
              buffer: out,
              separator: /:/
            });
            uids = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = rows.length; _i < _len; _i++) {
                row = rows[_i];
                if (((col = row[9]) != null) && col.length > 0) {
                  _results.push(parse(col));
                }
              }
              return _results;
            })();
          }
          return cb(err, uids);
        };
      })(this));
    };

    return GPG;

  })();

}).call(this);
