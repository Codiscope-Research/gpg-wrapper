// Generated by IcedCoffeeScript 1.7.1-a
(function() {
  var E, Engine, bufferify, iced, make_esc, parse, run, set_log, spawn, stream, __iced_k, __iced_k_noop, _log;

  iced = require('iced-coffee-script/lib/coffee-script/iced').runtime;
  __iced_k = __iced_k_noop = function() {};

  spawn = require('child_process').spawn;

  stream = require('./stream');

  E = require('./err').E;

  parse = require('pgp-utils').userid.parse;

  make_esc = require('iced-error').make_esc;

  _log = function(x) {
    return console.warn(x.toString('utf8'));
  };

  exports.set_log = set_log = function(log) {
    return _log = log;
  };

  exports.Engine = Engine = (function() {
    function Engine(_arg) {
      this.args = _arg.args, this.stdin = _arg.stdin, this.stdout = _arg.stdout, this.stderr = _arg.stderr, this.name = _arg.name, this.opts = _arg.opts;
      this.stderr || (this.stderr = new stream.FnOutStream(_log));
      this.stdin || (this.stdin = new stream.NullInStream());
      this.stdout || (this.stdout = new stream.NullOutStream());
      this.opts || (this.opts = {});
      this._exit_code = null;
      this._exit_cb = null;
      this._n_out = 0;
    }

    Engine.prototype._spawn = function(_arg, cb) {
      var e, eklass, err, klass;
      eklass = _arg.eklass;
      err = null;
      try {
        this.proc = spawn(this.name, this.args, this.opts);
        console.log("XX");
      } catch (_error) {
        e = _error;
        console.log("YY'");
        klass = (eklass != null ? eklass.cmd_not_found : void 0) || E.CmdNotFoundError;
        err = new klass("Failed to spawn " + this.name + ": " + e.message);
      }
      return cb(err);
    };

    Engine.prototype.run = function(_arg, cb) {
      var eklass, esc, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      eklass = _arg.eklass;
      esc = make_esc(cb, "Engine::run");
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/max/src/gpg-wrapper/src/cmd.iced",
            funcname: "Engine.run"
          });
          _this._spawn({
            eklass: eklass
          }, esc(__iced_deferrals.defer({
            lineno: 45
          })));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          console.log("A");
          _this.stdin.pipe(_this.proc.stdin);
          console.log("B");
          _this.proc.stdout.pipe(_this.stdout);
          console.log("C");
          _this.proc.stderr.pipe(_this.stderr);
          console.log("D");
          _this.pid = _this.proc.pid;
          _this._n_out = 3;
          _this.proc.on('exit', function(status) {
            return _this._got_exit(status);
          });
          _this.proc.stdout.on('end', function() {
            return _this._maybe_finish();
          });
          _this.proc.stderr.on('end', function() {
            return _this._maybe_finish();
          });
          console.log("ZZZ");
          return cb(null);
        };
      })(this));
    };

    Engine.prototype._got_exit = function(status) {
      this._exit_code = status;
      this.proc = null;
      return this._maybe_finish();
    };

    Engine.prototype._maybe_finish = function() {
      var ecb;
      if (--this._n_out <= 0) {
        if ((ecb = this._exit_cb) != null) {
          this._exit_cb = null;
          ecb(this._exit_code);
        }
        return this.pid = -1;
      }
    };

    Engine.prototype.wait = function(cb) {
      if (this._exit_code && this._n_out <= 0) {
        return cb(this._exit_code);
      } else {
        return this._exit_cb = cb;
      }
    };

    return Engine;

  })();

  exports.bufferify = bufferify = function(x) {
    if (x == null) {
      return null;
    } else if (typeof x === 'string') {
      return new Buffer(x, 'utf8');
    } else if (Buffer.isBuffer(x)) {
      return x;
    } else {
      return null;
    }
  };

  exports.run = run = function(inargs, cb) {
    var args, b, def_out, eklass, eng, err, klass, name, out, quiet, rc, stderr, stdin, stdout, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    args = inargs.args, stdin = inargs.stdin, stdout = inargs.stdout, stderr = inargs.stderr, quiet = inargs.quiet, name = inargs.name, eklass = inargs.eklass;
    if ((b = bufferify(stdin)) != null) {
      stdin = new stream.BufferInStream(b);
    }
    if (quiet) {
      stderr = new stream.NullOutStream();
    }
    if (stdout == null) {
      def_out = true;
      stdout = new stream.BufferOutStream();
    } else {
      def_out = false;
    }
    err = null;
    eng = new Engine({
      args: args,
      stdin: stdin,
      stdout: stdout,
      stderr: stderr,
      name: name
    });
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/max/src/gpg-wrapper/src/cmd.iced"
        });
        eng.run({
          eklass: eklass
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return err = arguments[0];
            };
          })(),
          lineno: 110
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        (function(__iced_k) {
          if (err == null) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/max/src/gpg-wrapper/src/cmd.iced"
              });
              eng.wait(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return rc = arguments[0];
                  };
                })(),
                lineno: 112
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(rc !== 0 ? (klass = (eklass != null ? eklass.cmd : void 0) || E.CmdError, err = new klass("exit code " + rc), err.rc = rc) : void 0);
            });
          } else {
            return __iced_k();
          }
        })(function() {
          out = def_out != null ? stdout.data() : null;
          return cb(err, out);
        });
      };
    })(this));
  };

}).call(this);
